---
# tasks file for master
- name: habilitar puertos kubernetes en firewall para nodo Master
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  loop: "{{ puertos }}"
  notify: cargar firewall
  tags: kubeMaster

- name: habilitar puertos kubernetes en firewall para nodo Worker
  firewalld:
    rich_rule: rule family=ipv4 source address={{ hostvars[item].internal_ip }}/32 accept
    permanent: yes
    state: enabled
    immediate: yes
  loop: "{{ groups['workers'] }}"
  notify: cargar firewall
  tags: kubeMaster

- name: Configurar kubeadm
  shell: "kubeadm config images pull"
  tags: kubeMaster

- name: chequear kubeadm
  stat:
    path: /etc/kubernetes/pki/ca.crt
  register: kubeadm_check
  tags: kubeMaster

- name: kubeadm init
  shell: kubeadm init --pod-network-cidr 192.168.0.0/16
  when: not kubeadm_check.stat.exists
  register: output
  notify:
    - reinicio
  tags: kubeMaster

- name: get join
  shell: kubeadm token create --print-join-command
  register: join_command
  changed_when: no
  tags: kubeMaster

- name: copy join
  delegate_to: localhost
  become: true
  copy:
    content: "{{ join_command.stdout }}\n"
    dest: "/tmp/k8s_join.sh"
    mode: 0755
  tags: kubeMaster

- name: Configurar kubeadm
  shell: "export KUBECONFIG=/etc/kubernetes/admin.conf"
  tags: kubeMaster

- name: crear el directorio .kube 
  become: false
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  tags: kubeMaster

- name: copia admin.conf de kube a configuración usuario 
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755
  tags: kubeMaster

- name: descarga definición de las políticas de red y HAProxy
  get_url:
    url: "{{ item.url }}"
    dest: "/tmp/{{ item.name }}.yml"
  loop: "{{ archivos_yml }}"
  tags: kubeMaster

- name: instalar libreria de python para kubernetes
  pip:
    name: kubernetes
  tags: kubeMaster

- name: despliegue de politicas red y HAProxy
  k8s:
    src: "/tmp/{{ item.name }}.yml"
  loop: "{{ archivos_yml }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  notify:
    - reinicio
  tags: kubeMaster